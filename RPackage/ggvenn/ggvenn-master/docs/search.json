[{"path":"https://ggvenn.github.io/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Linlin Yan. Author, maintainer.","code":""},{"path":"https://ggvenn.github.io/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Yan L (2023). ggvenn: Draw Venn Diagram 'ggplot2'. R package version 0.1.9.","code":"@Manual{,   title = {ggvenn: Draw Venn Diagram by 'ggplot2'},   author = {Linlin Yan},   year = {2023},   note = {R package version 0.1.9}, }"},{"path":"https://ggvenn.github.io/index.html","id":"ggvenn","dir":"","previous_headings":"","what":"Draw Venn Diagram by ggplot2","title":"Draw Venn Diagram by ggplot2","text":"Venn Diagram ggplot2, really easy--use API. package inspired Venny","code":""},{"path":[]},{"path":"https://ggvenn.github.io/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Draw Venn Diagram by ggplot2","text":"","code":"install.packages(\"ggvenn\") # install via CRAN if (!require(devtools)) install.packages(\"devtools\") devtools::install_github(\"yanlinlin82/ggvenn\") # install via GitHub (for latest version)"},{"path":"https://ggvenn.github.io/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick Start","title":"Draw Venn Diagram by ggplot2","text":"package supports list data.frame type data input. list data (element set): data.frame data (logical column set): data.frame data, also another way plot ggplot grammar:","code":"library(ggvenn)  a <- list(`Set 1` = c(1, 3, 5, 7, 9),           `Set 2` = c(1, 5, 9, 13),           `Set 3` = c(1, 2, 8, 9),           `Set 4` = c(6, 7, 10, 12)) ggvenn(a, c(\"Set 1\", \"Set 2\"))            # draw two-set venn ggvenn(a, c(\"Set 1\", \"Set 2\", \"Set 3\"))   # draw three-set venn ggvenn(a)   # without set names, the first 4 elements in list will be chose to draw four-set venn d <- tibble(value   = c(1,     2,     3,     5,     6,     7,     8,     9),             `Set 1` = c(TRUE,  FALSE, TRUE,  TRUE,  FALSE, TRUE,  FALSE, TRUE),             `Set 2` = c(TRUE,  FALSE, FALSE, TRUE,  FALSE, FALSE, FALSE, TRUE),             `Set 3` = c(TRUE,  TRUE,  FALSE, FALSE, FALSE, FALSE, TRUE,  TRUE),             `Set 4` = c(FALSE, FALSE, FALSE, FALSE, TRUE,  TRUE,  FALSE, FALSE)) ggvenn(d, c(\"Set 1\", \"Set 2\"))           # draw two-set venn ggvenn(d, c(\"Set 1\", \"Set 2\", \"Set 3\"))  # draw three-set venn ggvenn(d)   # without set names, the first 4 logical column in data.frame will be chose to draw four-set venn # draw two-set venn (use A, B in aes) ggplot(d, aes(A = `Set 1`, B = `Set 2`)) +   geom_venn() + theme_void() + coord_fixed()  # draw three-set venn (use A, B, C in aes) ggplot(d, aes(A = `Set 1`, B = `Set 2`, C = `Set 3`)) +   geom_venn() + theme_void() + coord_fixed()  # draw four-set venn (use A, B, C, D in aes) ggplot(d, aes(A = `Set 1`, B = `Set 2`, C = `Set 3`, D = `Set 4`)) +   geom_venn() + theme_void() + coord_fixed()"},{"path":"https://ggvenn.github.io/index.html","id":"more-options","dir":"","previous_headings":"","what":"More Options","title":"Draw Venn Diagram by ggplot2","text":"options customizing venn diagram. Tune color size filling: fill_color - default c(“blue”, “yellow”, “green”, “red”) fill_alpha - default 0.5 stroke: stroke_color - default “black” stroke_alpha - default 1 stroke_size - default 1 stroke_linetype - default “solid” set name: set_name_color - default “black” set_name_size - default 6 text: text_color - default “black” text_size - default 4 parameters used ggvenn() geom_venn(). example: Show elements show_elements - default FALSE label_sep - text used concatenate elements, default “,” example: Hide percentage show_percentage - default TRUE example: Change digits percentage digits - default 1 example:","code":"a <- list(A = 1:4, B = c(1,3,5)) ggvenn(a, stroke_linetype = 2, stroke_size = 0.5,   set_name_color = \"red\", set_name_size = 15,   fill_color = c(\"pink\", \"gold\")) a <- list(A = c(\"apple\", \"pear\", \"peach\"),           B = c(\"apple\", \"lemon\")) ggvenn(a, show_elements = TRUE)  ggvenn(a, show_elements = TRUE, label_sep = \"\\n\")  # show elements in line a <- list(A = 1:5, B = 1:2) ggvenn(a, show_percentage = FALSE) a <- list(A = 1:5, B = 1:2) ggvenn(a, digits = 2)"},{"path":"https://ggvenn.github.io/index.html","id":"data-format","dir":"","previous_headings":"","what":"Data Format","title":"Draw Venn Diagram by ggplot2","text":"ggvenn support two types input data: list data.frame. Two functions (data_frame_to_list() list_to_data_frame()) can convert data two types.","code":"a <- list(A = 1:5, B = 4:6) d <- tibble(key = 1:6,             A = c(rep(TRUE, 5), FALSE),             B = rep(c(FALSE, TRUE), each = 3))  identical(a, data_frame_to_list(d))  # TRUE identical(d, list_to_data_frame(a))  # TRUE"},{"path":"https://ggvenn.github.io/reference/data_frame_to_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function for data type conversion. — data_frame_to_list","title":"Utility function for data type conversion. — data_frame_to_list","text":"Utility function data type conversion.","code":""},{"path":"https://ggvenn.github.io/reference/data_frame_to_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function for data type conversion. — data_frame_to_list","text":"","code":"data_frame_to_list(x)"},{"path":"https://ggvenn.github.io/reference/data_frame_to_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function for data type conversion. — data_frame_to_list","text":"x data.frame logical columns representing sets.","code":""},{"path":"https://ggvenn.github.io/reference/data_frame_to_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function for data type conversion. — data_frame_to_list","text":"list sets.","code":""},{"path":"https://ggvenn.github.io/reference/data_frame_to_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utility function for data type conversion. — data_frame_to_list","text":"","code":"d <- tibble(name = 1:6,             A = c(rep(TRUE, 5), FALSE),             B = rep(c(FALSE, TRUE), each = 3)) print(d) #> # A tibble: 6 × 3 #>    name A     B     #>   <int> <lgl> <lgl> #> 1     1 TRUE  FALSE #> 2     2 TRUE  FALSE #> 3     3 TRUE  FALSE #> 4     4 TRUE  TRUE  #> 5     5 TRUE  TRUE  #> 6     6 FALSE TRUE  data_frame_to_list(d) #> $A #> [1] 1 2 3 4 5 #>  #> $B #> [1] 4 5 6 #>"},{"path":"https://ggvenn.github.io/reference/geom_venn.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot venn diagram as a ggplot layer object. It supports only data frame as input. — geom_venn","title":"Plot venn diagram as a ggplot layer object. It supports only data frame as input. — geom_venn","text":"Plot venn diagram ggplot layer object. supports data frame input.","code":""},{"path":"https://ggvenn.github.io/reference/geom_venn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot venn diagram as a ggplot layer object. It supports only data frame as input. — geom_venn","text":"","code":"geom_venn(   mapping = NULL,   data = NULL,   stat = \"identity\",   position = \"identity\",   ...,   set_names = NULL,   show_percentage = TRUE,   digits = 1,   label_sep = \",\",   count_column = NULL,   show_outside = c(\"auto\", \"none\", \"always\"),   auto_scale = FALSE,   fill_color = c(\"blue\", \"yellow\", \"green\", \"red\"),   fill_alpha = 0.5,   stroke_color = \"black\",   stroke_alpha = 1,   stroke_size = 1,   stroke_linetype = \"solid\",   set_name_color = \"black\",   set_name_size = 6,   text_color = \"black\",   text_size = 4 )"},{"path":"https://ggvenn.github.io/reference/geom_venn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot venn diagram as a ggplot layer object. It supports only data frame as input. — geom_venn","text":"mapping Set aesthetic mappings created aes() aes_(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data.frame list input data. stat statistical transformation use data layer, string. position Position adjustment, either string, result call position adjustment function. ... arguments passed layer(). often aesthetics, used set aesthetic fixed value, like colour = \"red\" size = 3. may also parameters paired geom/stat. set_names Set names, use column names omitted. show_percentage Show percentage set. digits desired number digits decimal point label_sep separator character displaying elements. fill_color Filling colors circles. fill_alpha Transparency filling circles. stroke_color Stroke color drawing circles. stroke_alpha Transparency drawing circles. stroke_size Stroke size drawing circles. stroke_linetype Line type drawing circles. set_name_color Text color set names. set_name_size Text size set names. text_color Text color intersect contents. text_size Text size intersect contents.","code":""},{"path":"https://ggvenn.github.io/reference/geom_venn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot venn diagram as a ggplot layer object. It supports only data frame as input. — geom_venn","text":"ggplot object print save file.","code":""},{"path":[]},{"path":"https://ggvenn.github.io/reference/geom_venn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot venn diagram as a ggplot layer object. It supports only data frame as input. — geom_venn","text":"","code":"library(ggvenn)  # use data.frame as input d <- tibble(value   = c(1,     2,     3,     5,     6,     7,     8,     9),             `Set 1` = c(TRUE,  FALSE, TRUE,  TRUE,  FALSE, TRUE,  FALSE, TRUE),             `Set 2` = c(TRUE,  FALSE, FALSE, TRUE,  FALSE, FALSE, FALSE, TRUE),             `Set 3` = c(TRUE,  TRUE,  FALSE, FALSE, FALSE, FALSE, TRUE,  TRUE),             `Set 4` = c(FALSE, FALSE, FALSE, FALSE, TRUE,  TRUE,  FALSE, FALSE))  # ggplot gramma ggplot(d) +   geom_venn(aes(A = `Set 1`, B = `Set 2`)) +   coord_fixed() +   theme_void() #> Warning: 'length(x) = 3 > 1' in coercion to 'logical(1)' #> Warning: 'length(x) = 3 > 1' in coercion to 'logical(1)'  ggplot(d) +   geom_venn(aes(A = `Set 1`, B = `Set 2`, C = `Set 3`)) +   coord_fixed() + theme_void() #> Warning: 'length(x) = 3 > 1' in coercion to 'logical(1)' #> Warning: 'length(x) = 3 > 1' in coercion to 'logical(1)'  ggplot(d) +   geom_venn(aes(A = `Set 1`, B = `Set 2`, C = `Set 3`, D = `Set 4`)) +   coord_fixed() +   theme_void() #> Warning: 'length(x) = 3 > 1' in coercion to 'logical(1)' #> Warning: 'length(x) = 3 > 1' in coercion to 'logical(1)'   # set fill color ggplot(d) +   geom_venn(aes(A = `Set 1`, B = `Set 2`), fill_color = c(\"red\", \"blue\")) +   coord_fixed() +   theme_void() #> Warning: 'length(x) = 3 > 1' in coercion to 'logical(1)' #> Warning: 'length(x) = 3 > 1' in coercion to 'logical(1)'   # hide percentage ggplot(d) +   geom_venn(aes(A = `Set 1`, B = `Set 2`), show_percentage = FALSE) +   coord_fixed() +   theme_void() #> Warning: 'length(x) = 3 > 1' in coercion to 'logical(1)' #> Warning: 'length(x) = 3 > 1' in coercion to 'logical(1)'   # change precision of percentages ggplot(d) +   geom_venn(aes(A = `Set 1`, B = `Set 2`), digits = 2) +   coord_fixed() +   theme_void() #> Warning: 'length(x) = 3 > 1' in coercion to 'logical(1)' #> Warning: 'length(x) = 3 > 1' in coercion to 'logical(1)'   # show elements instead of count/percentage ggplot(d) +   geom_venn(aes(A = `Set 1`, B = `Set 2`, C = `Set 3`, D = `Set 4`, label = value)) +   coord_fixed() +   theme_void() #> Warning: 'length(x) = 3 > 1' in coercion to 'logical(1)' #> Warning: 'length(x) = 3 > 1' in coercion to 'logical(1)'"},{"path":"https://ggvenn.github.io/reference/ggvenn.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot venn diagram as an independent function. It supports both data frame and list as input. — ggvenn","title":"Plot venn diagram as an independent function. It supports both data frame and list as input. — ggvenn","text":"Plot venn diagram independent function. supports data frame list input.","code":""},{"path":"https://ggvenn.github.io/reference/ggvenn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot venn diagram as an independent function. It supports both data frame and list as input. — ggvenn","text":"","code":"ggvenn(   data,   columns = NULL,   show_elements = FALSE,   show_percentage = TRUE,   digits = 1,   fill_color = c(\"blue\", \"yellow\", \"green\", \"red\"),   fill_alpha = 0.5,   stroke_color = \"black\",   stroke_alpha = 1,   stroke_size = 1,   stroke_linetype = \"solid\",   set_name_color = \"black\",   set_name_size = 6,   text_color = \"black\",   text_size = 4,   label_sep = \",\",   count_column = NULL,   show_outside = c(\"auto\", \"none\", \"always\"),   auto_scale = FALSE )"},{"path":"https://ggvenn.github.io/reference/ggvenn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot venn diagram as an independent function. It supports both data frame and list as input. — ggvenn","text":"data data.frame list input data. columns character vector use index select columns/elements. show_elements Show set elements instead count/percentage. show_percentage Show percentage set. digits desired number digits decimal point fill_color Filling colors circles. fill_alpha Transparency filling circles. stroke_color Stroke color drawing circles. stroke_alpha Transparency drawing circles. stroke_size Stroke size drawing circles. stroke_linetype Line type drawing circles. set_name_color Text color set names. set_name_size Text size set names. text_color Text color intersect contents. text_size Text size intersect contents. label_sep Separator character displaying elements. count_column Specify column element repeat count. show_outside Show outside elements (belongs set).","code":""},{"path":"https://ggvenn.github.io/reference/ggvenn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot venn diagram as an independent function. It supports both data frame and list as input. — ggvenn","text":"ggplot object print save file.","code":""},{"path":[]},{"path":"https://ggvenn.github.io/reference/ggvenn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot venn diagram as an independent function. It supports both data frame and list as input. — ggvenn","text":"","code":"library(ggvenn)  # use list as input a <- list(`Set 1` = c(1, 3, 5, 7),           `Set 2` = c(1, 5, 9),           `Set 3` = c(1, 2, 8),           `Set 4` = c(6, 7)) ggvenn(a, c(\"Set 1\", \"Set 2\"))  ggvenn(a, c(\"Set 1\", \"Set 2\", \"Set 3\"))  ggvenn(a)   # use data.frame as input d <- tibble(value   = c(1,     2,     3,     5,     6,     7,     8,     9),             `Set 1` = c(TRUE,  FALSE, TRUE,  TRUE,  FALSE, TRUE,  FALSE, TRUE),             `Set 2` = c(TRUE,  FALSE, FALSE, TRUE,  FALSE, FALSE, FALSE, TRUE),             `Set 3` = c(TRUE,  TRUE,  FALSE, FALSE, FALSE, FALSE, TRUE,  TRUE),             `Set 4` = c(FALSE, FALSE, FALSE, FALSE, TRUE,  TRUE,  FALSE, FALSE)) ggvenn(d, c(\"Set 1\", \"Set 2\"))  ggvenn(d, c(\"Set 1\", \"Set 2\", \"Set 3\"))  ggvenn(d)   # set fill color ggvenn(d, c(\"Set 1\", \"Set 2\"), fill_color = c(\"red\", \"blue\"))   # hide percentage ggvenn(d, c(\"Set 1\", \"Set 2\"), show_percentage = FALSE)   # change precision of percentages ggvenn(d, c(\"Set 1\", \"Set 2\"), digits = 2)   # show elements instead of count/percentage ggvenn(a, show_elements = TRUE)  ggvenn(d, show_elements = \"value\")"},{"path":"https://ggvenn.github.io/reference/list_to_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function for data type conversion. — list_to_data_frame","title":"Utility function for data type conversion. — list_to_data_frame","text":"Utility function data type conversion.","code":""},{"path":"https://ggvenn.github.io/reference/list_to_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function for data type conversion. — list_to_data_frame","text":"","code":"list_to_data_frame(x)"},{"path":"https://ggvenn.github.io/reference/list_to_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function for data type conversion. — list_to_data_frame","text":"x list sets.","code":""},{"path":"https://ggvenn.github.io/reference/list_to_data_frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function for data type conversion. — list_to_data_frame","text":"data.frame logical columns representing sets.","code":""},{"path":"https://ggvenn.github.io/reference/list_to_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utility function for data type conversion. — list_to_data_frame","text":"","code":"a <- list(A = 1:5, B = 4:6) print(a) #> $A #> [1] 1 2 3 4 5 #>  #> $B #> [1] 4 5 6 #>  list_to_data_frame(a) #> # A tibble: 6 × 3 #>     key A     B     #>   <int> <lgl> <lgl> #> 1     1 TRUE  FALSE #> 2     2 TRUE  FALSE #> 3     3 TRUE  FALSE #> 4     4 TRUE  TRUE  #> 5     5 TRUE  TRUE  #> 6     6 FALSE TRUE"}]
